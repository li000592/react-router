{"version":3,"sources":["img/pic-k-100.png","Header.js","Post.js","getData.js","PostsList.js","User.js","UserList.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","React","useState","pages","setPages","location","useLocation","pathname","useEffect","includes","Post","props","className","post","title","body","getData","type","userId","a","URL","fetch","response","ok","Error","statusText","json","console","error","PostsList","id","useParams","posts","setPosts","then","cards","map","key","to","User","kk","AvatarGenerator","generateRandomAvatar","src","alt","user","name","email","UserList","users","Todo","todo","TodoList","todos","setTodos","App","setUsers","exact","path","Fragment","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"4MAAAA,EAAOC,QAAU,IAA0B,uC,qLCqB5BC,MAjBf,WAAmB,IAAD,EACYC,IAAMC,WADlB,mBACPC,EADO,KACAC,EADA,KAEVC,EAAWC,cAAcC,SAQ7B,OAPAN,IAAMO,WAAU,WACK,MAAbH,EAAkBD,EAAS,QACtBC,EAASI,SAAS,SACvBL,EAAS,QAERA,EAAS,UACf,CAACC,IAEA,gCACI,4BAAKF,K,MCKFO,MAlBf,SAAcC,GAGV,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,YAAf,UAGA,yBAAKA,UAAU,QACX,4BAAKD,EAAME,KAAKC,OAChB,2BAAIH,EAAME,KAAKE,U,yBCd5B,SAAeC,EAAtB,oC,4CAAO,WAAuBC,EAAMC,GAA7B,iBAAAC,EAAA,sEAGuBC,EAAT,UAATH,EAAwB,6CACpB,qDAAiDC,EAAjD,YAA2DD,GAJpE,SAMwBI,MAAMD,GAN9B,WAMOE,EANP,QAOeC,GAPf,sBAOyB,IAAIC,MAAMF,EAASG,YAP5C,gCAQQH,EAASI,QARjB,kCAUCC,QAAQC,MAAR,MAVD,2D,sBCwBQC,MAnBf,WAAsB,IACZC,EAAOC,cAAPD,GADW,EAES7B,IAAMC,WAFf,mBAEV8B,EAFU,KAEHC,EAFG,KAOjB,GAJAhC,IAAMO,WAAU,WACZQ,EAAQ,QAASc,GAAII,MAAK,SAAAZ,GAAQ,OAAIW,EAASX,QAChD,CAACQ,KAECE,EAAO,OAAO,wBAAIpB,UAAU,WAAd,iBACnB,IAAMuB,EAAQH,EAAMI,KAAI,SAAAvB,GACpB,OAAO,kBAAC,EAAD,CAAMwB,IAAKxB,EAAKiB,GAAIjB,KAAMA,OAErC,OACI,6BACI,kBAAC,IAAD,CAASD,UAAU,UAAU0B,GAAG,KAAhC,QACA,yBAAK1B,UAAU,kBAAkBuB,K,sBCW9BI,MAtBf,SAAc5B,GACV,IACI6B,GADc,IAAIC,mBACHC,uBACnB,OACI,yBAAK9B,UAAU,YACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,SAAS+B,IAAKH,EAAII,IAAI,YAEzC,yBAAKhC,UAAU,QACX,2BAAID,EAAMkC,KAAKC,MACf,2BAAInC,EAAMkC,KAAKE,QAEnB,yBAAKnC,UAAU,WACX,kBAAC,IAAD,CAAMA,UAAU,UAAU0B,GAAI,UAAY3B,EAAMkC,KAAKf,IAArD,SACA,kBAAC,IAAD,CAAMlB,UAAU,UAAU0B,GAAI,UAAY3B,EAAMkC,KAAKf,IAArD,aCRLkB,MAZf,SAAkBrC,GACd,IAAKA,EAAMsC,MAAO,OAAO,wBAAIrC,UAAU,WAAd,iBACzB,IAAMuB,EAAQxB,EAAMsC,MAAMb,KAAI,SAAAS,GAC1B,OAAO,kBAAC,EAAD,CAAMR,IAAKQ,EAAKf,GAAIe,KAAMA,OAErC,OACI,6BACI,yBAAKjC,UAAU,kBAAkBuB,K,MCS9Be,MAhBf,SAAcvC,GACV,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,WAGf,yBAAKA,UAAU,QACX,4BAAKD,EAAMwC,KAAKrC,OAChB,0CCYLsC,MAnBf,WAAqB,IAAD,EACUnD,IAAMC,WADhB,mBACTmD,EADS,KACFC,EADE,KAEVxB,EAAOC,cAAPD,GAIN,GAHA7B,IAAMO,WAAU,WACZQ,EAAQ,QAASc,GAAII,MAAK,SAAAZ,GAAQ,OAAIgC,EAAShC,QAChD,CAACQ,KACCuB,EAAO,OAAO,wBAAIzC,UAAU,WAAd,iBACnB,IAAMuB,EAAQkB,EAAMjB,KAAI,SAAAe,GACpB,OAAO,kBAAC,EAAD,CAAMd,IAAKc,EAAKrB,GAAIqB,KAAMA,OAGrC,OACI,6BACI,kBAAC,IAAD,CAASvC,UAAU,UAAU0B,GAAG,KAAhC,QACA,yBAAK1B,UAAU,kBAAkBuB,K,MCuB9BoB,MAjCf,WAAgB,IAAD,EACarD,qBADb,mBACN+C,EADM,KACCO,EADD,KAMb,OAJAhD,qBAAU,WACRQ,EAAQ,SAASkB,MAAK,SAAAZ,GAAQ,OAAIkC,EAASlC,QAC1C,IAGD,yBAAKV,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO6C,OAAK,EAACC,KAAK,cAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,cAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAUT,MAAOA,KAEnB,kBAAC,IAAD,KACE,kBAAC,IAAMU,SAAP,KACE,wBAAI/C,UAAU,WAAd,wBCpBIgD,QACW,cAA7BC,OAAOxD,SAASyD,UAEe,UAA7BD,OAAOxD,SAASyD,UAEhBD,OAAOxD,SAASyD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9C,GACLD,QAAQC,MAAMA,EAAM+C,c","file":"static/js/main.434a7f09.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pic-k-100.db846acd.png\";","import React from 'react'\nimport './Header.css'\nimport { useLocation } from \"react-router-dom\";\n\nfunction Header() {\n    const [pages, setPages] = React.useState()\n    let location = useLocation().pathname\n    React.useEffect(() => {\n        if (location === '/') setPages('USER')\n        else if (location.includes('posts')) {\n            setPages('POST')\n        }\n        else setPages('TODO')\n    }, [location])\n    return (\n        <header>\n            <h1>{pages}</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport './Post.css'\n\nfunction Post(props) {\n\n\n    return (\n        <div className=\"PostList\">\n            <div className=\"PostCard\">\n                <div className=\"postIcon\">\n                    â€¢\n                </div>\n                <div className=\"info\">\n                    <h3>{props.post.title}</h3>\n                    <p>{props.post.body}</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Post\n","export async function getData(type, userId) {\n    try {\n        let URL\n        if (type === 'users') URL = 'https://jsonplaceholder.typicode.com/users'\n        else URL = `https://jsonplaceholder.typicode.com/users/${userId}/${type}`\n\n        const response = await fetch(URL)\n        if (!response.ok) throw new Error(response.statusText)\n        return response.json()\n    } catch (error) {\n        console.error(error);\n    }\n}","import React from 'react'\nimport { NavLink, useParams } from 'react-router-dom'\nimport Post from './Post'\nimport { getData } from './getData'\n\nfunction PostsList() {\n    let { id } = useParams()\n    const [posts, setPosts] = React.useState()\n    React.useEffect(() => {\n        getData('posts', id).then(response => setPosts(response))\n    }, [id])\n\n    if (!posts) return <h1 className='loading'>Loading Users</h1>\n    const cards = posts.map(post => {\n        return <Post key={post.id} post={post} />\n    })\n    return (\n        <div>\n            <NavLink className=\"NavLink\" to='/'>Home</NavLink>\n            <div className='card-container'>{cards}</div>\n        </div>\n    )\n}\n\nexport default PostsList\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport './User.css'\nimport img from './img/pic-k-100.png'\nimport { AvatarGenerator } from 'random-avatar-generator';\n\n\n\nfunction User(props) {\n    const generator = new AvatarGenerator()\n    let kk = generator.generateRandomAvatar()\n    return (\n        <div className=\"UserList\">\n            <div className=\"UserCard\">\n                <div className=\"avatarDiv\" >\n                    <img className=\"avatar\" src={kk} alt=\"avatar\" />\n                </div>\n                <div className=\"info\">\n                    <p>{props.user.name}</p>\n                    <p>{props.user.email}</p>\n                </div>\n                <div className=\"buttons\">\n                    <Link className=\"NavLink\" to={'/posts/' + props.user.id}>Posts</Link>\n                    <Link className=\"NavLink\" to={'/todos/' + props.user.id}>Todos</Link>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default User","import React from 'react'\nimport User from './User'\n\nfunction UserList(props) {\n    if (!props.users) return <h1 className='loading'>Loading Users</h1>\n    const cards = props.users.map(user => {\n        return <User key={user.id} user={user} />\n    })\n    return (\n        <div>\n            <div className='card-container'>{cards}</div>\n        </div>\n    )\n}\n\nexport default UserList\n","import React from 'react'\nimport './Todo.css'\n\nfunction Todo(props) {\n    return (\n        <div className=\"TodoList\">\n            <div className=\"TodoCard\">\n                <div className=\"avatar\">\n                    {/* <img src={img} alt=\"avatar\" /> */}\n                </div>\n                <div className=\"info\">\n                    <h3>{props.todo.title}</h3>\n                    <p>pending</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Todo\n","import React from 'react'\nimport { NavLink, useParams } from 'react-router-dom'\nimport Todo from './Todo'\nimport { getData } from './getData'\n\nfunction TodoList() {\n    const [todos, setTodos] = React.useState()\n    let { id } = useParams()\n    React.useEffect(() => {\n        getData('todos', id).then(response => setTodos(response))\n    }, [id])\n    if (!todos) return <h1 className='loading'>Loading Users</h1>\n    const cards = todos.map(todo => {\n        return <Todo key={todo.id} todo={todo} />\n        return null\n    })\n    return (\n        <div>\n            <NavLink className=\"NavLink\" to='/'>Home</NavLink>\n            <div className='card-container'>{cards}</div>\n        </div>\n    )\n}\n\nexport default TodoList\n","import React, { useEffect, useState } from 'react'\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport Header from './Header'\nimport PostsList from './PostsList'\nimport UserList from './UserList'\nimport TodoList from './TodoList'\nimport { getData } from './getData'\nimport './App.css';\n\nfunction App() {\n  const [users, setUsers] = useState()\n  useEffect(() => {\n    getData('users').then(response => setUsers(response))\n  }, [])\n\n  return (\n    <div className='App'>\n      <Router>\n        <Header />\n        <main>\n          <Switch>\n            <Route exact path='/posts/:id'>\n              <PostsList />\n            </Route>\n            <Route exact path='/todos/:id'>\n              <TodoList />\n            </Route>\n            <Route exact path='/'>\n              <UserList users={users} />\n            </Route>\n            <Route>\n              <React.Fragment >\n                <h1 className='loading'>Loading Users</h1>\n              </React.Fragment>\n            </Route>\n          </Switch>\n        </main>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}